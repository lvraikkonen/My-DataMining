library(plyr)
user<-c(1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,5)
item<-c(101,102,103,101,102,103,104,101,104,105,107,101,103,104,106,101,102,103,104,105,106)
pref<-c(5.0,3.0,2.5,2.0,2.5,5.0,2.0,2.0,4.0,4.5,5.0,5.0,3.0,4.5,4.0,4.0,3.0,2.0,4.0,3.5,4.0)
train<-data.frame(user,item,pref)
train
usersUnique<-function(){
users<-unique(train$user)
users[order(users)]
}
#计算商品列表方法
itemsUnique<-function(){
items<-unique(train$item)
items[order(items)]
}
# 用户列表
users<-usersUnique()
# 商品列表
items<-itemsUnique()
#建立商品列表索引
index<-function(x) which(items %in% x)
data<-ddply(train,.(user,item,pref),summarize,idx=index(item))
usersUnique()
itemsUnique()
summary(train)
train$item
unique(train$item)
?ddply
data
index
index(train$items)
a <- index(train$items)
a
head(data)
data
length(items)
matrix(rep(0, length(items) * length(items)),nrow = length(items))
co <- matrix(rep(0, length(items) * length(items)),nrow = length(items))
?merge
index
items
data$user
users
u1 = 1
data$users == u1
data$users = u1
data
usersUnique <- function(){
users <- unique(train$user)
users[order(users)]
}
#计算商品列表方法
itemsUnique <- function(){
items <- unique(train$item)
items[order(items)]
}
# 用户列表
users <- usersUnique()
# 商品列表
items <- itemsUnique()
#建立商品列表索引
index <- function(x) which(items %in% x)
data <- ddply(train,
.(user,item,pref),
summarize,
idx=index(item))
head(data)
which(data$user == 1)
data$item
data$item[which(data$user==1)]
i = data$item[which(data$user==1)]
i
index(i)
m <- merge(index(i))
m <- merge(index(i),index(i))
m
co<-cooccurrence(data)
cooccurrence<-function(data){
n <- length(items)
co <- matrix(rep(0,n*n),nrow=n)
for(u in users){
idx <- index(data$item[which(data$user==u)])
#每个用户的商品两两出现的集合
m <- merge(idx,idx)
for(i in 1:nrow(m)){
#根据商品的索引找到同现矩阵中的位置进行次数累加
co[m$x[i],m$y[i]] = co[m$x[i],m$y[i]]+1
}
}
return(co)
}
recommend<-function(udata=udata,co=coMatrix,num=0){
n <- length(items)
# all of pref
pref <- rep(0,n)
pref[udata$idx] <- udata$pref
# 用户评分矩阵
userx <- matrix(pref,nrow=n)
# 同现矩阵*评分矩阵
r <- co %*% userx
# 推荐结果排序
# 把该用户评分过的商品的推荐值设为0
r[udata$idx] <- 0
idx <- order(r,decreasing=TRUE)
topn <- data.frame(user=rep(udata$user[1],length(idx)),
item=items[idx],
val=r[idx])
# 推荐结果取前num个
if(num>0){
topn <- head(topn,num)
}
#返回结果
return(topn)
}
co<-cooccurrence(data)
co
co <- cooccurrence(data)
recommendation <- data.frame()
recommendation
for(i in 1:length(users)){
udata <- data[which(data$user==users[i]),]
recommendation <- rbind(recommendation,recommend(udata,co,0))
}
recommendation
recommendation <- recommendation[which(recommendation$val > 0),]
recommendation
library(knitr)
knit("Collaborative Filtering.Rmd","Collaborative Filtering.md")
